---
- name: Stat to pg_data
  ansible.builtin.stat:
    path: "{{ pg_data }}"
  register: data_check
  become: true

- name: Stat to pg_data/pg_wal
  ansible.builtin.stat:
    path: "{{ pg_data }}/pg_wal"
  register: data_wal_check
  become: true

- name: Stat to pg_wal
  ansible.builtin.stat:
    path: "{{ pg_wal }}"
  register: wal_check
  become: true
  when: pg_wal|length > 0 and pg_data not in pg_wal

- name: Check that pg_data was configured correctly
  ansible.builtin.assert:
    that:
      - data_check.stat['gr_name'] == pg_group
      - data_check.stat['pw_name'] == pg_owner
      - data_check.stat['isdir']|bool
    fail_msg: "The directory {{ pg_data }} is not configured correctly."
    success_msg: "The directory {{ pg_data }} is configured correctly."

- name: Check that pg_wal was configured correctly
  ansible.builtin.assert:
    that:
      - wal_check.stat['pw_name'] == pg_owner
      - wal_check.stat['isdir']|bool
      - data_wal_check.stat['islnk']|bool
      - data_wal_check.stat['lnk_source'] == pg_wal
    fail_msg: "The directory {{ pg_wal }} is not configured correctly."
    success_msg: "The directory {{ pg_wal }} is configured correctly."
  when: pg_wal|length > 0 and pg_data not in pg_wal

# check if service pg_service is running
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Check if service pg_service is running
  ansible.builtin.assert:
    that:
      - ansible_facts.services[pg_service + '.service']['state'] == 'running'
    fail_msg: "The service {{ pg_service }} is not running."
    success_msg: "The service {{ pg_service }} is running."

- name: Check if service pg_service is enabled
  ansible.builtin.assert:
    that:
      - ansible_facts.services[pg_service + '.service']['status'] == 'enabled'
    fail_msg: "The service {{ pg_service }} is not enabled."
    success_msg: "The service {{ pg_service }} is enabled."
  when: ansible_os_family == 'RedHat'

# check if sockets are listening
- name: Get stat info for pg_unix_socket_directories
  ansible.builtin.stat:
    path: "{{ pg_unix_socket_directories[0] }}/.s.PGSQL.{{ pg_port }}"
  register: unix_stat

- name: Check that port is listening
  ansible.builtin.wait_for:
    port: "{{ pg_port }}"
    state: started
    msg: "Port {{ pg_port }} is listening."
  become: true

- name: Check pg_unix_socket_directories socket
  ansible.builtin.assert:
    that:
      - unix_stat.stat['issock']|bool
    fail_msg: "The socket {{ pg_unix_socket_directories[0] }} is not enabled."
    success_msg: "The socket {{ pg_unix_socket_directories[0] }} is enabled."

- name: Reset variables
  ansible.builtin.set_fact:
    data_check: null
    data_wal_check: null
    wal_check: null
    unix_stat: null
