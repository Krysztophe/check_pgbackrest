#!/usr/bin/env perl
#-----------------------------------------------------------------------------
# This program is open source, licensed under the PostgreSQL license.
# For license terms, see the LICENSE file.
#
# Author: Stefan Fercot
# Copyright: (c) 2018-2019, Dalibo.
#-----------------------------------------------------------------------------

=head1 NAME

check_pgbackrest - pgBackRest backup check plugin for Nagios

=head1 SYNOPSIS

  check_pgbackrest [-s|--service SERVICE] [-S|--stanza NAME]
  check_pgbackrest [-l|--list]
  check_pgbackrest [--help]

=head1 DESCRIPTION

check_pgbackrest is designed to monitor pgBackRest backups from Nagios.

=cut

use vars qw($VERSION $PROGRAM);
use strict;
use warnings;
use POSIX;
use Data::Dumper;
use File::Basename;
use File::Spec;
use File::Find;
use Getopt::Long qw(:config bundling no_ignore_case_always);
use Pod::Usage;
use Config;
use FindBin;

# Display error message if some specific modules are not loaded
BEGIN {
    my(@DBs, @missingDBs, $mod);

    @DBs = qw(JSON);
    for $mod (@DBs) {
        if (eval "require $mod") {
            $mod->import();
        } else {
            push @missingDBs, $mod;
        }
    }
    die "@missingDBs module(s) not loaded.\n" if @missingDBs;
}

# Messing with PATH so pod2usage always finds this script
my @path = split /$Config{'path_sep'}/ => $ENV{'PATH'};
push @path => $FindBin::Bin;
$ENV{'PATH'} = join $Config{'path_sep'} => @path;
undef @path;

# Reference to the output sub
my $output_fmt;

$VERSION = '1.6dev';
$PROGRAM = 'check_pgbackrest';

# Available services and descriptions.
#-----------------------------------------------------------------------------

my %services = (
    'retention' => {
        'sub'  => \&check_retention,
        'desc' => 'Check the retention policy.',
        'stanza-arg' => 1
    },
    'archives' => {
        'sub'  => \&check_wal_archives,
        'desc' => 'Check WAL archives.',
        'stanza-arg' => 1
    },
    'check_pgb_version' => {
        'sub'  => \&check_pgb_version,
        'desc' => 'Check the version of this check_pgbackrest script.',
        'stanza-arg' => 0
    }
);

=over

=item B<-s>, B<--service> SERVICE

The Nagios service to run. See section SERVICES for a description of
available services or use C<--list> for a short service and description
list.

=item B<-S>, B<--stanza> NAME

Name of the stanza to check.

=item B<-F>, B<--format> OUTPUT_FORMAT

The output format. Supported outputs are: C<human> and C<nagios> (default).

=item B<-C>, B<--command> FILE

pgBackRest executable file (default: "pgbackrest").

=item B<-c>, B<--config> CONFIGURATION_FILE

pgBackRest configuration file.

=item B<-P>, B<--prefix> COMMAND

Some prefix command to execute the pgBackRest info command 
(eg: "sudo -iu postgres").

=item B<-l>, B<--list>

List available services.

=item B<--debug>

Print some debug messages.

=item B<-V>, B<--version>

Print version and exit.

=item B<-?>, B<--help>

Show this help page.

=back

=cut

my %args = (
    'command' => 'pgbackrest',
    'format' => 'nagios',
    'wal-segsize' => '16MB',
    'default-pgbackrest-config-file' => '/etc/pgbackrest.conf',
);

# Set name of the program without path*
my $orig_name = $0;
$0 = $PROGRAM;

# Die on kill -1, -2, -3 or -15
$SIG{'HUP'} = $SIG{'INT'} = $SIG{'QUIT'} = $SIG{'TERM'} = \&terminate;

# Handle SIG
sub terminate {
    my ($signal) = @_;
    die ("SIG $signal caught.");
}

# Print the version and exit
sub version {
    printf "%s version %s, Perl %vd\n",
        $PROGRAM, $VERSION, $^V;

    exit 0;
}

# List services that can be performed
sub list_services {

    print "List of available services:\n\n";

    foreach my $service ( sort keys %services ) {
        printf "\t%-17s\t%s\n", $service, $services{$service}{'desc'};
    }

    exit 0;
}

# Handle output formats
#-----------------------------------------------------------------------------
sub dprint {
    return unless $args{'debug'};
    foreach (@_) {
        print "DEBUG: $_";
    }
}

sub unknown($;$$$) {
    return $output_fmt->( 3, $_[0], $_[1], $_[2], $_[3] );
}

sub critical($;$$$) {
    return $output_fmt->( 2, $_[0], $_[1], $_[2], $_[3] );
}

sub warning($;$$$) {
    return $output_fmt->( 1, $_[0], $_[1], $_[2], $_[3] );
}

sub ok($;$$$) {
    return $output_fmt->( 0, $_[0], $_[1], $_[2], $_[3] );
}

sub human_output ($$;$$$) {
    my $rc      = shift;
    my $service = shift;
    my $ret;
    my @msg;
    my @longmsg;
    my @human_only_longmsg;

    @msg      = @{ $_[0] } if defined $_[0];
    @longmsg  = @{ $_[1] } if defined $_[1];
    @human_only_longmsg  = @{ $_[2] } if defined $_[2];

    $ret  = sprintf "%-15s: %s\n", 'Service', $service;

    $ret .= sprintf "%-15s: 0 (%s)\n", "Returns", "OK"       if $rc == 0;
    $ret .= sprintf "%-15s: 1 (%s)\n", "Returns", "WARNING"  if $rc == 1;
    $ret .= sprintf "%-15s: 2 (%s)\n", "Returns", "CRITICAL" if $rc == 2;
    $ret .= sprintf "%-15s: 3 (%s)\n", "Returns", "UNKNOWN"  if $rc == 3;

    $ret .= sprintf "%-15s: %s\n", "Message", $_ foreach @msg;
    $ret .= sprintf "%-15s: %s\n", "Long message", $_ foreach @longmsg;
    $ret .= sprintf "%-15s: %s\n", "Long message", $_ foreach @human_only_longmsg;

    print $ret;
    return $rc;
}

sub nagios_output ($$;$$) {
    my $rc  = shift;
    my $ret = shift;
    my @msg;
    my @longmsg;

    $ret .= " OK"       if $rc == 0;
    $ret .= " WARNING"  if $rc == 1;
    $ret .= " CRITICAL" if $rc == 2;
    $ret .= " UNKNOWN"  if $rc == 3;

    @msg      = @{ $_[0] } if defined $_[0];
    @longmsg  = @{ $_[1] } if defined $_[1];

    $ret .= " - ". join( ', ', @msg )    if @msg;
    $ret .= " | ". join( ' ', @longmsg ) if @longmsg;

    print $ret;
    return $rc;
}

# Handle time intervals
#-----------------------------------------------------------------------------

sub is_time($){
    my $str_time = lc( shift() );
    return 1 if ( $str_time
        =~ /^(\s*([0-9]\s*[smhd]?\s*))+$/
    );
    return 0;
}

# Return formatted time string with units.
# Parameter: duration in seconds
sub to_interval($) {
    my $val      = shift;
    my $interval = '';

    return $val if $val =~ /^-?inf/i;

    $val = int($val);

    if ( $val > 604800 ) {
        $interval = int( $val / 604800 ) . "w ";
        $val %= 604800;
    }

    if ( $val > 86400 ) {
        $interval .= int( $val / 86400 ) . "d ";
        $val %= 86400;
    }

    if ( $val > 3600 ) {
        $interval .= int( $val / 3600 ) . "h";
        $val %= 3600;
    }

    if ( $val > 60 ) {
        $interval .= int( $val / 60 ) . "m";
        $val %= 60;
    }

    $interval .= "${val}s" if $val > 0;

    return "${val}s" unless $interval; # return a value if $val <= 0

    return $interval;
}

# Return a duration in seconds from an interval (with units).
sub get_time($) {
    my $str_time = lc( shift() );
    my $ts       = 0;
    my @date;

    die(      "Malformed interval: «$str_time»!\n"
            . "Authorized unit are: dD, hH, mM, sS.\n" )
        unless is_time($str_time);

    # no bad units should exist after this line!

    @date = split( /([smhd])/, $str_time );

LOOP_TS: while ( my $val = shift @date ) {

        $val = int($val);
        die("Wrong value for an interval: «$val»!") unless defined $val;

        my $unit = shift(@date) || '';

        if ( $unit eq 'm' ) {
            $ts += $val * 60;
            next LOOP_TS;
        }

        if ( $unit eq 'h' ) {
            $ts += $val * 3600;
            next LOOP_TS;
        }

        if ( $unit eq 'd' ) {
            $ts += $val * 86400;
            next LOOP_TS;
        }

        $ts += $val;
    }

    return $ts;
}

# Handle size units
#-----------------------------------------------------------------------------

# Return a size in bytes from a size with unit.
# If unit is '%', use the second parameter to compute the size in bytes.
sub get_size($;$) {
    my $str_size = shift;
    my $size     = 0;
    my $unit     = '';

    die "Only integers are accepted as size. Adjust the unit to your need.\n"
        if $str_size =~ /[.,]/;

    $str_size =~ /^([0-9]+)(.*)$/;

    $size = int($1);
    $unit = lc($2);

    return $size unless $unit ne '';

    if ( $unit eq '%' ) {
        my $ratio = shift;

        die("Can't compute a ratio without the factor!\n")
            unless defined $unit;

        return int( $size * $ratio / 100 );
    }

    return $size           if $unit eq 'b';
    return $size * 1024    if $unit =~ '^k[bo]?$';
    return $size * 1024**2 if $unit =~ '^m[bo]?$';
    return $size * 1024**3 if $unit =~ '^g[bo]?$';
    return $size * 1024**4 if $unit =~ '^t[bo]?$';
    return $size * 1024**5 if $unit =~ '^p[bo]?$';
    return $size * 1024**6 if $unit =~ '^e[bo]?$';
    return $size * 1024**7 if $unit =~ '^z[bo]?$';

    die("Unknown size unit: $unit\n");
}

# Interact with pgBackRest
#-----------------------------------------------------------------------------

sub pgbackrest_info {
    my $infocmd = $args{'command'}." info";
    $infocmd .= " --stanza=".$args{'stanza'};
    $infocmd .= " --output=json";

    if(defined $args{'config'}) {
        $infocmd .= " --config=".$args{'config'};
    }    

    if(defined $args{'prefix'}) {
        $infocmd = $args{'prefix'}." $infocmd";
    }

    dprint("pgBackRest info command was : '$infocmd'\n");
    my $json_output = `$infocmd 2>&1 |grep -v WARN |grep -v ERROR`;

    die("Can't get pgBackRest info.\nCommand was '$infocmd'.\n") unless ($? eq 0);
    
    my $decoded_json = decode_json($json_output);

    foreach my $line (@{$decoded_json}) {
        return $line if($line->{'name'} eq $args{'stanza'});
    }

    return;
}

# Services
#-----------------------------------------------------------------------------

=head2 SERVICES

Descriptions and parameters of available services.

=over

=item B<retention>

Fail when the number of full backups is less than the 
C<--retention-full> argument.

Fail when the newest backup is older than the C<--retention-age> 
argument.

The following units are accepted (not case sensitive): s (second), m 
(minute), h (hour), d (day). You can use more than one unit per 
given value.

=cut

sub check_retention {
    my $me             = 'BACKUPS_RETENTION';
    my %args           = %{ $_[0] };
    my @msg;
    my @warn_msg;
    my @crit_msg;
    my @longmsg;

    pod2usage(
        -message => 'FATAL: you must provide --retention-age and/or --retention-full.',
        -exitval => 127
    ) if ( not defined $args{'retention-full'} and not defined $args{'retention-age'} );

    my $backups_info = pgbackrest_info();
    die("Can't get pgBackRest info.\n") unless (defined $backups_info);

    if($backups_info->{'status'}->{'code'} == 0) {
        my @full_bck;
        my @diff_bck;
        my @incr_bck;

        foreach my $line (@{$backups_info->{'backup'}}){
            push @full_bck, $line->{'label'} if($line->{'type'} eq "full");
            push @diff_bck, $line->{'label'} if($line->{'type'} eq "diff");
            push @incr_bck, $line->{'label'} if($line->{'type'} eq "incr");
        }

        push @longmsg, "full=".scalar(@full_bck);
        push @longmsg, "diff=".scalar(@diff_bck);
        push @longmsg, "incr=".scalar(@incr_bck);

        # check retention
        if(defined $args{'retention-full'} and scalar(@full_bck) < $args{'retention-full'}){
            push @crit_msg, "not enough full backups, ".$args{'retention-full'}." required";
        }

        # check latest age
        # backup age considered at pg_stop_backup
        my $latest_bck = @{$backups_info->{'backup'}}[-1];
        my $latest_bck_age = time() - $latest_bck->{'timestamp'}->{'stop'};
        push @longmsg, "latest=".$latest_bck->{'type'}.",".$latest_bck->{'label'};
        push @longmsg, "latest_age=".to_interval($latest_bck_age);

        if(defined $args{'retention-age'}){
            my $bck_age_limit = get_time($args{'retention-age'} );
            push @crit_msg, "backups are too old" if $latest_bck_age >= $bck_age_limit;
        }
    }else{
        push @crit_msg, $backups_info->{'status'}->{'message'};
    }

    return critical($me, \@crit_msg, \@longmsg) if @crit_msg;
    return warning($me, \@warn_msg, \@longmsg) if @warn_msg;
    push @msg, "backups policy checks ok";
    return ok( $me, \@msg, \@longmsg );
}

=item B<archives>

Check if all archived WALs exist between the oldest and the latest 
WAL needed for the recovery.

This service requires the C<--repo-path> argument to specify where 
the archived WALs are stored.

The C<--repo-host> and C<--repo-host-user> arguments allow to list
remote archived WALs using SFTP.

The C<--repo-s3> enables remote archived WALs stored in Amazon S3.

The C<--repo-s3-over-http> switch to HTTP connection instead of HTTPS.

Archives must be compressed (.gz). If needed, use "compress-level=0"
instead of "compress=n".

Use the C<--wal-segsize> argument to set the WAL segment size.

The following units are accepted (not case sensitive):
b (Byte), k (KB), m (MB), g (GB), t (TB), p (PB), e (EB) or Z (ZB). Only
integers are accepted. Eg. C<1.5MB> will be refused, use C<1500kB>.

The factor between units is 1024 bytes. Eg. C<1g = 1G = 1024*1024*1024.> 

Use the C<--ignore-archived-since> argument to ignore the archived 
WALs since the provided interval.

The C<--latest-archive-age-alert> argument defines the max age of 
the latest archived WAL as an interval before raising a critical 
alert.

The following units are accepted as interval (not case sensitive):
s (second), m (minute), h (hour), d (day). You can use more than 
one unit per given value. If not set, the last unit is in seconds. 
Eg. "1h 55m 6" = "1h55m6s".

=cut

sub check_wal_archives {
    my $me             = 'WAL_ARCHIVES';
    my %args           = %{ $_[0] };
    my @msg;
    my @warn_msg;
    my @crit_msg;
    my @longmsg;
    my @human_only_longmsg;
    my $suffix = ".gz";

    pod2usage(
        -message => 'FATAL: you must provide --repo-path.',
        -exitval => 127
    ) if ( not defined $args{'repo-path'} );

    my $backups_info = pgbackrest_info();
    die("Can't get pgBackRest info.\n") unless (defined $backups_info);

    if($backups_info->{'status'}->{'code'} == 0) {

        my $wal_segsize = $args{'wal-segsize'};
        my $walsize = '4GB'; # 4 TB -> bytes
        my $seg_per_wal = get_size($walsize) / get_size($wal_segsize); #Only for PG >= 9.3
        my $dbver=($backups_info->{'db'}[0]->{'version'}+0)*10;
        $seg_per_wal-- if $dbver <= 92;

        my $archives_dir = $args{'repo-path'}."/".$args{'stanza'}."/".$backups_info->{'archive'}[0]->{'id'};
        dprint("archives_dir: $archives_dir\n");
        my $min_wal = $backups_info->{'archive'}[0]->{'min'};
        my $max_wal = $backups_info->{'archive'}[0]->{'max'};
        push @human_only_longmsg, "archives_dir=$archives_dir";
        push @human_only_longmsg, "min_wal=$min_wal" if $min_wal;

        # Get all the WAL archives and history files
        my @filelist;
        my @filelist_simplified;
        my $filename_re = qr/^[0-9A-F]{24}.*$suffix$/;
        my $filename_re_full = qr/[0-9A-F]{24}.*$suffix$/;

        if($args{'repo-host'}){
            require Net::SFTP::Foreign;
            my $sftp;
            if($args{'repo-host-user'}){
                $sftp = Net::SFTP::Foreign->new($args{'repo-host'}, user => $args{'repo-host-user'});
            }else{
                $sftp = Net::SFTP::Foreign->new($args{'repo-host'});
            }
            $sftp->die_on_error("Unable to establish SFTP connection");
            my @files = $sftp->find($archives_dir,
                                    wanted => sub {
                                        my $file_fullpath = $_[1]->{filename};
                                        my @split_tab = split('/', $file_fullpath);
                                        my $filename = $split_tab[-1];
                                        return undef unless $filename =~ /$filename_re/;
                                        my $attributes = $sftp->stat($_[1]->{filename})
                                            or die "remote stat command failed: ".$sftp->status;

                                        if ( $args{'ignore-archived-since'} ) {
                                            my $diff_epoch = time() - $attributes->mtime;
                                            dprint ("file ".$filename." as interval since epoch : ".to_interval($diff_epoch)."\n");
                                            return if ( $diff_epoch <= get_time($args{'ignore-archived-since'}) );
                                        }

                                        push @filelist, [$filename, $attributes->mtime, $attributes->size, $file_fullpath];
                                        push @filelist_simplified, substr($filename, 0, 24);
                                    });
        }elsif($args{'repo-s3'}){
            require Net::Amazon::S3;
            require Config::IniFiles;

            my $cfg_file=$args{'default-pgbackrest-config-file'};
            if(defined $args{'config'}) {
                $cfg_file=$args{'config'};
            }
            dprint("cfg_file: $cfg_file\n");

            my $cfg = Config::IniFiles->new( -file => $cfg_file );
            my $aws_key = $cfg->val( 'global', 'repo1-s3-key' );
            my $aws_secret = $cfg->val( 'global', 'repo1-s3-key-secret' );
            my $repo1_bucket = $cfg->val( 'global', 'repo1-s3-bucket' );
            my $repo1_endpoint = $cfg->val( 'global', 'repo1-s3-endpoint' );
            dprint("repo1-s3-bucket: $repo1_bucket\n");
            dprint("repo1-s3-endpoint: $repo1_endpoint\n");

            my $secure = defined $args{'repo-s3-over-http'} ? 0 : 1;

            pod2usage(
                -message => 'FATAL: be sure to set repo1-s3-endpoint, repo1-s3-key, repo1-s3-key-secret, and repo1-s3-bucket in the pgBackRest configuration file.',
                -exitval => 127
            ) unless ( defined $aws_key and defined $aws_secret and defined $repo1_bucket and defined $repo1_endpoint );

            my $s3 = Net::Amazon::S3->new(
                aws_access_key_id     => $aws_key,
                aws_secret_access_key => $aws_secret,
                host                  => $repo1_endpoint,
                retry                 => 1,
                secure                => $secure,
            );

            my $client = Net::Amazon::S3::Client->new( s3 => $s3 );
            my $bucket = $client->bucket( name => $repo1_bucket );

            my $stream = $bucket->list({ prefix => $archives_dir, delimiter => '/' });
            until ( $stream->is_done ) {
                foreach my $object ( $stream->items ) {
                    my @split_tab = split('/', $object->key);
                    my $filename = $split_tab[-1];
                    next unless $filename =~ /$filename_re/;
                    my $dt = $object->last_modified;

                    if ( $args{'ignore-archived-since'} ) {
                        my $diff_epoch = time() - $dt->epoch();
                        dprint ("s3 file ".$filename." as interval since epoch : ".to_interval($diff_epoch)."\n");
                        next if ( $diff_epoch <= get_time($args{'ignore-archived-since'}) );
                    }

                    push @filelist, [$filename, $dt->epoch(), $object->size, $object->key];
                    push @filelist_simplified, substr($filename, 0, 24);
                }
            }
        }else{
            find ({ wanted => sub {
                    return unless -f;
                    return unless /$filename_re_full/;

                    if ( $args{'ignore-archived-since'} ) {
                        my $diff_epoch = time() - (stat($File::Find::name))[9];
                        dprint ("file ".$_." as interval since epoch : ".to_interval($diff_epoch)."\n");
                        return if ( $diff_epoch <= get_time($args{'ignore-archived-since'}) );
                    }
                    push @filelist, [basename($_), (stat($File::Find::name))[9,7], $File::Find::name];
                    push @filelist_simplified, substr(basename($_), 0, 24);
                }, no_chdir => 1, follow => 1
            }, $archives_dir );
        }

        return unknown $me, ['no archived WAL found'] unless @filelist;

        # Sort by filename
        my @filelist_sorted = sort { $a->[0] cmp $b->[0] }
            grep{ (defined($_->[0]) and defined($_->[1]))
                or die "Can't read WAL files."
            } @filelist;

        # Change max_wal if some archived are ignored
        if ( $args{'ignore-archived-since'} && $max_wal ) {
            $max_wal = substr($filelist_sorted[-1][0], 0, 24);
            dprint ("max_wal changed to ".$max_wal."\n");
        }
        push @human_only_longmsg, "max_wal=$max_wal" if $max_wal;

        # Check min/max exists, start = min, last = max ?
        return critical $me, ['min WAL not found: '.$min_wal] if($min_wal && ! grep( /^$min_wal$/, @filelist_simplified ));
        return critical $me, ['max WAL not found: '.$max_wal] if($max_wal && ! grep( /^$max_wal$/, @filelist_simplified ));
        push @warn_msg, "min WAL is not the oldest archive" if($min_wal && ! grep( /^$min_wal/, $filelist_sorted[0][0] ));
        push @warn_msg, "max WAL is not the latest archive" if($max_wal && ! grep( /^$max_wal/, $filelist_sorted[-1][0] ));
        push @human_only_longmsg, "oldest_archive=".$filelist_sorted[0][0];
        push @human_only_longmsg, "latest_archive=".$filelist_sorted[-1][0];

        my $latest_archive_age = time() - $filelist_sorted[-1][1];
        my $num_archives = scalar(@filelist_sorted);
        push @longmsg, "latest_archive_age=".to_interval($latest_archive_age);
        push @longmsg, "num_archives=$num_archives";

        # Is the latest archive too old ?
        if ( $args{'latest-archive-age-alert'} && $latest_archive_age > get_time($args{'latest-archive-age-alert'})){
            push @crit_msg => "latest_archive_age (".to_interval($latest_archive_age).") exceeded";
        }

        my $start_tl = substr($filelist_sorted[0][0], 0, 8);
        my $end_tl   = substr($filelist_sorted[-1][0], 0, 8);
        my $timeline = hex($start_tl);
        my $wal = hex(substr($filelist_sorted[0][0], 8, 8));
        my $seg = hex(substr($filelist_sorted[0][0], 16, 8));

        # look for history files if timeline differs
        my @branch_wals;
        if ( $start_tl ne $end_tl ) {
            if ( -s "$archives_dir/$end_tl.history" ) {
                open my $fd, "<", "$archives_dir/$end_tl.history";
                while ( <$fd> ) {
                    next unless m{^\s*(\d)\t([0-9A-F]+)/([0-9A-F]+)\t.*$};
                    push @branch_wals =>
                        sprintf("%08d%08s%08X", $1, $2, hex($3)>>24);
                }
                close $fd;
            }
        }

        # Check ALL archives are here.
        for ( my $i=0, my $j=0; $i <= $#filelist_sorted ; $i++, $j++ ) {
            dprint("checking WAL $filelist_sorted[$i][0]\n");
            my $curr = sprintf('%08X%08X%08X',
                $timeline,
                $wal + int(($seg + $j)/$seg_per_wal),
                ($seg + $j)%$seg_per_wal
            );

            unless ( grep( /^$curr/, $filelist_sorted[$i][0] ) ) {
                push @crit_msg => "wrong sequence or missing file @ '$curr'";
                last;
            }

            if ( grep /$curr/, @branch_wals ) {
                dprint("found a boundary @ '$curr' !\n");
                $timeline++;
                $j--;
            }
        }

        push @msg, "$num_archives WAL archived, "
            ."latest archived since ". to_interval($latest_archive_age);
    }else{
        push @crit_msg, $backups_info->{'status'}->{'message'};
    }

    return critical($me, \@crit_msg, \@longmsg, \@human_only_longmsg) if @crit_msg;
    return warning($me, \@warn_msg, \@longmsg, \@human_only_longmsg) if @warn_msg;
    return ok( $me, \@msg, \@longmsg, \@human_only_longmsg);
}

=item B<check_pgb_version>

Check if this script is running a given version.

You must provide the expected version using C<--target-version>.

=cut

sub check_pgb_version {
    my $me             = 'CHECK_PGBACKREST_VERSION';
    my %args           = %{ $_[0] };
    my @msg;
    my @warn_msg;
    my @crit_msg;
    my @longmsg;

    pod2usage(
        -message => 'FATAL: you must provide --target-version.',
        -exitval => 127
    ) if not defined $args{'target-version'};

    pod2usage(
        -message => "FATAL: given version does not look like a $PROGRAM version!",
        -exitval => 127
    ) if ( defined $args{'target-version'} and $args{'target-version'} !~ m/^\d\.\d+(?:_?(?:dev|beta|rc)\d*)?$/ );

    if (defined $args{'target-version'} and $VERSION ne $args{'target-version'}){
        push @crit_msg, sprintf("%s version should be %s", $PROGRAM, $args{'target-version'});
        push @longmsg, sprintf("%s version %s, Perl %vd", $PROGRAM, $VERSION, $^V);
    }

    return critical($me, \@crit_msg, \@longmsg) if @crit_msg;
    return warning($me, \@warn_msg, \@longmsg) if @warn_msg;

    push @msg, sprintf("%s version %s, Perl %vd", $PROGRAM, $VERSION, $^V);
    return ok( $me, \@msg, \@longmsg );
}

# End of SERVICE section in pod doc
=pod

=back

=cut

Getopt::Long::Configure('bundling');
GetOptions(
    \%args,
        'command|C=s',
        'config|c=s',
        'debug!',
        'format|F=s',
        'help|?!',
        'ignore-archived-since=s',
        'latest-archive-age-alert=s',
        'list|l!',
        'prefix|P=s',
        'repo-s3!',
        'repo-s3-over-http!',
        'repo-host=s',
        'repo-host-user=s',
        'repo-path=s',
        'retention-age=s',
        'retention-full=i',
        'service|s=s',
        'stanza|S=s',
        'target-version=s',
        'version|V!',
        'wal-segsize=s'
) or pod2usage( -exitval => 127 );

list_services() if $args{'list'};
version()       if $args{'version'};
pod2usage( -verbose => 2 ) if $args{'help'};
pod2usage( -verbose => 1 ) unless defined $args{'service'};

# Check that the given service exists.
pod2usage(
    -message => "FATAL: service $args{'service'} does not exist.\n"
        . "    Use --list to show the available services.",
    -exitval => 127
) unless exists $services{ $args{'service'} };

# The stanza name must be given if a service is specified and 'stanza-arg' is required
pod2usage(
    -message => "FATAL: you must specify a stanza name.\n"
        . "    See -S or --stanza command line option.",
    -exitval => 127
) if defined $args{'service'} and $services{$args{'service'}}{'stanza-arg'} and not defined $args{'stanza'};

# Check "retention" specific args --retention-age and --retention-full
pod2usage(
    -message => 'FATAL: "retention-age" and "retention-full" are only allowed with "retention" service.',
    -exitval => 127
) if ( $args{'retention-age'} or $args{'retention-full'} )
    and $args{'service'} ne 'retention';

# Check "archives" specific args --repo-path, --repo-host, --repo-host-user, --repo-s3 and --repo-s3-over-http
pod2usage(
    -message => 'FATAL: "repo-path", "repo-host", "repo-host-user", "repo-s3" and "repo-s3-over-http" are only allowed with "archives" service.',
    -exitval => 127
) if ( $args{'repo-path'} or $args{'repo-host'} or $args{'repo-host-user'} or $args{'repo-s3'}  or $args{'repo-s3-over-http'} )
    and $args{'service'} ne 'archives';

# Check "archives" specific args --ignore-archived-since and --latest-archive-age-alert
pod2usage(
    -message => 'FATAL: "ignore-archived-since" and "latest-archive-age-alert" are only allowed with "archives" service.',
    -exitval => 127
) if ( $args{'ignore-archived-since'} or $args{'latest-archive-age-alert'} )
    and $args{'service'} ne 'archives';

# Check "check_pgb_version" specific arg --target-version
pod2usage(
    -message => 'FATAL: "target-version" is only allowed with "check_pgb_version" service.',
    -exitval => 127
) if $args{'itarget-version'} and $args{'service'} ne 'check_pgb_version';

# Output format
for ( $args{'format'} ) {
       if ( /^human$/         ) { $output_fmt = \&human_output  }
    elsif ( /^nagios$/        ) { $output_fmt = \&nagios_output }
    else {
        pod2usage(
            -message => "FATAL: unrecognized output format \"$_\" (see \"--format\")",
            -exitval => 127
        );
    }
}

exit $services{ $args{'service'} }{'sub'}->( \%args );

__END__

=head1 CONTRIBUTING

check_pgbackrest is an open project. Any contribution to improve it is welcome.

=head1 VERSION

check_pgbackrest version 1.5, released on Mon Mar 18 2019.

=head1 LICENSING

This program is open source, licensed under the PostgreSQL license.
For license terms, see the LICENSE file.

=head1 AUTHORS

Author: Stefan Fercot.

Logo: Damien Cazeils (www.damiencazeils.com).

Copyright: (c) 2018-2019, Dalibo.

=cut
